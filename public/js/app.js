// Generated by CoffeeScript 1.10.0
(function() {
  var i18n, uri,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  i18n = {
    status: {
      '-1': '禁用',
      0: "等待邮箱验证",
      1: "余额不足",
      2: "正常使用"
    },
    zone: {
      h: '中国',
      j: '亚太',
      a: '北美'
    },
    monthly_plan: {
      1: 'Level 1',
      2: 'Level 2',
      3: 'Level 3',
      4: 'Level 4',
      5: 'Level 5'
    },
    invoice_type: {
      1: '充值',
      2: '流量消费',
      3: '套餐消费',
      4: '优惠码',
      '-1': '充值撤销',
      '-3': '套餐撤销'
    },
    invoice_status: {
      0: '待付款',
      1: '已完成',
      2: '已取消',
      3: '等待确认收货'
    }
  };

  $('#sign_up').submit(function(event) {
    event.preventDefault();
    if (this.password.value === this.password_confirm.value) {
      return $.ajax({
        url: '/api/user',
        type: 'POST',
        data: JSON.stringify({
          username: this.username.value,
          password: this.password.value,
          email: this.email.value,
          refer: this.code.value
        }),
        dataType: 'json',
        contentType: "application/json; charset=utf-8"
      }).done(function(data, textStatus, jqXHR) {
        store.set('token', data.token);
        alert('注册成功,请查收验证邮件');
        return location.href = '/';
      }).fail(function(jqXHR, textStatus, errorThrown) {
        if ((jqXHR.responseJSON != null) && (jqXHR.responseJSON.code != null)) {
          switch (jqXHR.responseJSON.code) {
            case 8:
              return alert('用户名格式不正确');
            case 9:
              return alert('用户名已被占用');
            case 10:
              return alert('邮箱格式不正确');
            case 11:
              return alert('邮箱已被占用');
            case 15:
              return alert('邀请码不正确或已过期');
            default:
              return alert('其他错误1');
          }
        } else {
          return alert('其他错误2');
        }
      });
    } else {
      return alert('两次密码输入不一致');
    }
  });

  $('#sign_in').submit(function(event) {
    event.preventDefault();
    return $.ajax({
      url: '/api/sign_in',
      type: 'PUT',
      data: JSON.stringify({
        username: this.username.value,
        password: this.password.value
      }),
      dataType: 'json',
      contentType: "application/json; charset=utf-8"
    }).done(function(data, textStatus, jqXHR) {
      store.set('token', data.token);
      return location.href = '/';
    }).fail(function(jqXHR, textStatus, errorThrown) {
      if (jqXHR.status === 403) {
        return alert('用户名或密码错误');
      } else {
        return alert('登录失败: 其他错误');
      }
    });
  });

  $('#sign_out').click(function(event) {
    event.preventDefault();
    store.remove('token');
    $('#is_sign_in').hide();
    return $('#not_sign_in').show();
  });

  $('#password_reset_1').submit(function(event) {
    event.preventDefault();
    return $.ajax({
      url: '/api/password_reset',
      type: 'POST',
      data: JSON.stringify({
        username: this.username.value,
        email: this.email.value
      }),
      contentType: "application/json; charset=utf-8"
    }).done(function(data, textStatus, jqXHR) {
      return alert('请查收验证邮件');
    }).fail(function(jqXHR, textStatus, errorThrown) {
      if (jqXHR.status === 403) {
        return alert('邮箱与用户名不符');
      } else {
        return alert('其他错误');
      }
    });
  });

  $('#password_reset_2').submit(function(event) {
    event.preventDefault();
    return $.ajax({
      url: '/api/password_reset',
      type: 'PUT',
      data: JSON.stringify({
        code: uri.query(true).code,
        password: this.password.value
      }),
      contentType: "application/json; charset=utf-8"
    }).done(function(data, textStatus, jqXHR) {
      return location.href = '/';
    }).fail(function(jqXHR, textStatus, errorThrown) {
      if (jqXHR.status === 403) {
        return alert('验证代码错误或已失效');
      } else {
        return alert('其他错误');
      }
    });
  });

  $('#change_plan').submit(function(event) {
    event.preventDefault();
    return $.getJSON('/api/sign_in', {
      token: store.get('token')
    }).done((function(_this) {
      return function(data, textStatus, jqXHR) {
        if (data.zone !== _this.zone_id.value) {
          return $.ajax({
            url: "/api/zone?token=" + (store.get('token')),
            type: 'PUT',
            data: JSON.stringify({
              zone: _this.zone_id.value
            }),
            contentType: "application/json; charset=utf-8"
          }).done(function(data, textStatus, jqXHR) {
            console.log('切换地区成功');
            return $.ajax({
              url: "/api/plan?token=" + (store.get('token')),
              type: 'POST',
              data: JSON.stringify({
                id: _this.plan_id.value
              }),
              contentType: "application/json; charset=utf-8"
            }).done(function(data, textStatus, jqXHR) {
              console.log('切换套餐成功');
              return location.href = '/invoices';
            }).fail(function(jqXHR, textStatus, errorThrown) {
              return alert('切换套餐失败, 可能由于余额不足或账号状态异常');
            });
          }).fail(function(jqXHR, textStatus, errorThrown) {
            return alert('切换地区失败');
          });
        } else {
          return $.ajax({
            url: "/api/plan?token=" + (store.get('token')),
            type: 'POST',
            data: JSON.stringify({
              id: _this.plan_id.value
            }),
            contentType: "application/json; charset=utf-8"
          }).done(function(data, textStatus, jqXHR) {
            console.log('切换套餐成功');
            return location.href = '/invoices';
          }).fail(function(jqXHR, textStatus, errorThrown) {
            return alert('切换套餐失败, 可能由于余额不足或账号状态异常');
          });
        }
      };
    })(this)).fail(function(jqXHR, textStatus, errorThrown) {
      return alert('未知错误1');
    });
  });

  $('#pay input[name=payment]').change(function(event) {
    if (this.value === 'code') {
      $('#pay_amount').hide();
      return $('#pay_code').show();
    } else {
      $('#pay_amount').show();
      return $('#pay_code').hide();
    }
  });

  $('#pay').submit(function(event) {
    var payment;
    event.preventDefault();
    $('#pay input[type=submit]').prop("disabled", true);
    payment = this.payment.value;
    if (payment === 'paypal' && parseFloat(this.amount.value) < 15) {
      alert('由于Paypal 会向我们收取高昂的手续费, 我们仅支持单笔 ￥15 ($2.4) 以上的充值金额使用 Paypal 付款.');
      $('#pay input[type=submit]').prop("disabled", false);
      return;
    }
    if (payment === 'code') {
      return $.ajax({
        url: "/api/code/" + this.code.value + "?token=" + (store.get('token')),
        type: 'POST',
        contentType: "application/json; charset=utf-8"
      }).done(function(data, textStatus, jqXHR) {
        alert('充值成功');
        return location.reload();
      }).fail((function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          if (jqXHR.status === 403) {
            alert('优惠码不正确');
          } else {
            alert('未知错误1');
          }
          return $('#pay input[type=submit]').prop("disabled", false);
        };
      })(this));
    } else {
      return $.ajax({
        url: "/api/payment?token=" + (store.get('token')),
        type: 'POST',
        data: JSON.stringify({
          amount: parseFloat(this.amount.value) * 100,
          payment: this.payment.value
        }),
        dataType: 'json',
        contentType: "application/json; charset=utf-8"
      }).done((function(_this) {
        return function(data, textStatus, jqXHR) {
          if (payment === 'alipay') {
            return location.href = 'http://pay.my-card.in/redirect?' + data[1];
          } else {
            return location.href = data[1];
          }
        };
      })(this)).fail((function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          if (jqXHR.status === 400) {
            alert('金额不正确');
          } else {
            alert('未知错误1');
          }
          return $('#pay input[type=submit]').prop("disabled", false);
        };
      })(this));
    }
  });

  $('#invoices').on('click', '.repay', function(event) {
    event.preventDefault();
    return $.ajax({
      url: "https://railgun.ac/api/invoice/" + ($(this).attr('data-id')) + "?token=" + (store.get('token')),
      type: 'PUT',
      dataType: 'json',
      contentType: "application/json; charset=utf-8"
    }).done(function(data, textStatus, jqXHR) {
      return location.href = 'http://pay.my-card.in/redirect?' + data[1];
    }).fail(function(jqXHR, textStatus, errorThrown) {
      return alert('发起付款失败');
    });
  });

  $('#change_password').submit(function(event) {
    event.preventDefault();
    if (this.password.value === this.password_confirm.value) {
      return $.ajax({
        url: "/api/user/password?token=" + (store.get('token')),
        type: 'PUT',
        data: JSON.stringify({
          password: this.old_password.value,
          newpassword: this.password.value
        }),
        contentType: "application/json; charset=utf-8"
      }).done(function(data, textStatus, jqXHR) {
        alert('修改密码成功, 请重新登录');
        return location.href = '/';
      }).fail(function(jqXHR, textStatus, errorThrown) {
        if (jqXHR.status === 403) {
          return alert('旧密码不正确');
        } else {
          return alert('未知错误1');
        }
      });
    } else {
      return alert('两次密码输入不一致');
    }
  });

  $('#resend-email').submit(function(event) {
    event.preventDefault();
    return $.ajax({
      url: "/api/email_verify?token=" + (store.get('token')),
      type: 'POST',
      data: this.email.value !== $('#resend-email input[name=email]').attr('data-origin') ? JSON.stringify({
        email: this.email.value
      }) : void 0,
      contentType: "application/json; charset=utf-8"
    }).done(function(data, textStatus, jqXHR) {
      return alert('请查收验证邮件');
    }).fail(function(jqXHR, textStatus, errorThrown) {
      if (jqXHR.status === 409) {
        return alert('邮箱已经被占用');
      } else {
        return alert('未知错误1');
      }
    });
  });

  $('#change_sub_password').click(function(event) {
    event.preventDefault();
    return $.getJSON('/api/sign_in', {
      token: store.get('token')
    }).done(function(user, textStatus, jqXHR) {
      return $.ajax({
        url: "/api/zone?token=" + (store.get('token')),
        type: 'PUT',
        data: JSON.stringify({
          zone: user.zone
        }),
        contentType: "application/json; charset=utf-8"
      }).done((function(_this) {
        return function(data, textStatus, jqXHR) {
          alert('服务密码已经重置, 请参照连接说明修改设备上的代理/VPN设置. ');
          return location.reload();
        };
      })(this)).fail(function(jqXHR, textStatus, errorThrown) {
        return alert('未知错误2');
      });
    }).fail(function(jqXHR, textStatus, errorThrown) {
      return alert('未知错误1');
    });
  });

  uri = new URI();

  switch (uri.path()) {
    case '/email_verify':
      $.ajax({
        url: '/api/email_verify',
        type: 'PUT',
        data: JSON.stringify({
          code: uri.query(true).code
        }),
        contentType: "application/json; charset=utf-8"
      }).done(function(data, textStatus, jqXHR) {
        return location.href = '/';
      }).fail(function(jqXHR, textStatus, errorThrown) {
        return alert('验证邮箱失败');
      });
      break;
    case '/password_reset':
      if (uri.query(true).code != null) {
        $('#password_reset_2').show();
      } else {
        $('#password_reset_1').show();
      }
      break;
    case '/invoices':
      $.getJSON('/api/sign_in', {
        token: store.get('token')
      }).done(function(user, textStatus, jqXHR) {
        if (user.billing_date != null) {
          $('#billing_date').text(user.billing_date);
          $('#billing_date_wrapper').show();
        }
        return $.getJSON('/api/invoice', {
          token: store.get('token')
        }).done(function(data, textStatus, jqXHR) {
          var i, invoice, j, len, len1, payment_value, results;
          for (i = 0, len = data.length; i < len; i++) {
            invoice = data[i];
            $("<tr><td>" + i18n.invoice_type[invoice.type] + "</td><td>" + (invoice.amount / 100) + "</td><td>" + i18n.invoice_status[invoice.status] + "</td><td>" + (new Date(invoice.generate_time * 1000)) + "</td><td>" + (invoice.finish_time != null ? new Date(invoice.finish_time * 1000) : '') + "</td><td>" + (invoice.type === 1 && invoice.status === 0 ? "<a class=\"repay\" href=\"#\" data-id=\"" + invoice.uuid + "\">付款</a>" : invoice.type === 1 && invoice.status === 3 ? "<a class=\"repay\" href=\"https://www.alipay.com\" target=\"_blank\">确认收货</a>" : '') + "</td></tr>").appendTo('#invoices');
          }
          results = [];
          for (j = 0, len1 = data.length; j < len1; j++) {
            invoice = data[j];
            if (!(invoice.type === 3 && invoice.status === 0)) {
              continue;
            }
            payment_value = -(user.traffic_remains + invoice.amount);
            if (payment_value > 0) {
              $('#pay input[name=amount]').val(payment_value / 100);
            }
            break;
          }
          return results;
        });
      });
      break;
    case '/plans':
      if (store.get('token')) {
        $.getJSON('/api/plan', {
          token: store.get('token')
        }).done(function(data, textStatus, jqXHR) {
          var i, len, plan, plans_enabled, ref;
          plans_enabled = [2, 3, 4, 5];
          data.sort(function(a, b) {
            if (a.id < b.id) {
              return -1;
            } else {
              return 1;
            }
          });
          for (i = 0, len = data.length; i < len; i++) {
            plan = data[i];
            if (ref = plan.id, indexOf.call(plans_enabled, ref) >= 0) {
              $("<label><input name=\"plan_id\" type=\"radio\" value=\"" + plan.id + "\">" + plan.name + ": ￥" + (plan.price / 100) + "/月/" + (plan.traffic / 1024 / 1024 / 1024) + "GB</label><br/>").appendTo('#plans');
            }
          }
          return $('input[name=plan_id][value=2]').prop("checked", true);
        }).fail(function(jqXHR, textStatus, errorThrown) {
          return alert('未知错误');
        });
      } else {
        location.href = '/';
      }
      break;
    case '/':
      if (store.get('token')) {
        $.getJSON('/api/sign_in', {
          token: store.get('token')
        }).done(function(user, textStatus, jqXHR) {
          if (user.status > 0 && user.next_monthly_plan === 1) {
            return location.href = '/plans';
          } else {
            $('#username').text(user.username);
            $('#monthly_plan').text(i18n.monthly_plan[user.next_monthly_plan]);
            $('#status').text(i18n.status[user.status]);
            $('#traffic_monthly_used').text((user.traffic_month_used / Math.pow(1024, 3)).toFixed(2));
            $('#traffic_monthly_start').text(user.traffic_month_start / Math.pow(1024, 3));
            $('#credits').text(user.traffic_remains / 100);
            $('#zone').text(i18n.zone[user.zone]);
            if (user.status === 0) {
              $('#resend-email input[name=email]').val(user.email);
              $('#resend-email input[name=email]').attr('data-origin', user.email);
              $('#resend-email').show();
            } else {
              $('#email_confirmed').show();
            }
            $('#is_sign_in').show();
            if (user.status >= 2) {
              $('#tutorials').show();
              return $('.tutorial-button').click(function(event) {
                event.preventDefault();
                return $.get("/tutorials/" + ($(this).attr('data-platform')) + ".md.mustache", function(data) {
                  var template;
                  template = Hogan.compile(data);
                  return $('#tutorial').html(marked(template.render({
                    zone: user.zone,
                    username: user.username,
                    sub_password: user.sub_password,
                    sub_password_2: parseInt(user.sub_password) + 1,
                    sub_password_3: parseInt(user.sub_password) + 2
                  })));
                });
              });
            }
          }
        }).fail(function(jqXHR, textStatus, errorThrown) {
          return $('#not_sign_in').show();
        });
      } else {
        $('#not_sign_in').show();
      }
  }

}).call(this);
